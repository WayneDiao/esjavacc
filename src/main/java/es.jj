options{
    STATIC=false;
}
PARSER_BEGIN(ParseCondition)
import java.io.PrintStream;
import com.huacloud.es.EsManager;
import com.huacloud.es.impl.EsManagerImpl;
import com.huacloud.es.utils.DateTimeUtil;
import org.apache.commons.lang3.math.NumberUtils;
public class ParseCondition{
    public static void main(String[] args) throws Exception,TokenMgrError{
        while(true){
            try{
                ParseCondition parseCondition = new ParseCondition(System.in);
                EsManager esManager=new EsManagerImpl();
                parseCondition.start(esManager,System.out);
            } catch (Exception e){
                System.out.println("input error");
                continue;
            } catch (TokenMgrError e){
                System.out.println("input error,please try again!");
                continue;
            }
        }
    }
    String previousValue = null;
}
PARSER_END(ParseCondition)
SKIP  : { " " | "\t" | "\n" | "\r" }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < AND : "and" > }
TOKEN : { < OR : "or" > }
TOKEN : { < EQUAL : "=" > }
TOKEN : { < NOT : "<>" > }
TOKEN : { < GREATER : ">" > }
TOKEN : { < GREATER_EQUAL : ">=" > }
TOKEN : { < LESS : "<" > }
TOKEN : { < LESS_EQUAL : "<=" > }
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < CHARACTER : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* > }
TOKEN : { < COLON : "%" > }
TOKEN : { < END : ";" > }
TOKEN : { < STRING : (["a"-"z","A"-"Z","0"-"9",":","+","-","\u4E00"-"\u9FA5"])+ > }

void start(EsManager esManager,PrintStream printStream) : {}
{
    (
        previousValue = Result() <END>
        {
            printStream.println("{\"query\":"+previousValue+"}") ;
            printStream.println(esManager.query("{\"query\":"+previousValue+"}")) ;
        }
    )*
}

String Result() : {
    String i ;
    String value ;
}
{
    value = Or()
    { return "{\"bool\":" + value + "}" ; }
}


String Or() : {
    String i ;
    String value ;
}
{
    value = And()
    (
        <OR>
        i = And()
        { value += "," + i ; }
    )*
    { return "{\"should\":[" + value + "]}"; }
}

String And() : {
    String i ;
    String value ;
}
{
    value = Condition()
    (
        <AND>
        i = Condition()
        { value = value + "," + i ; }
    )*
    { return "{\"bool\":{\"must\":[" + value + "]}}" ; }
}

String Condition() : {
    String i ;
    String value ;
}
{
    value = Primary()
    (
        <NOT>
        i = Primary()
        {
            value = "{\"bool\":{\"must_not\":{\"term\":" + "{ \"" + value + "\": " + "\"" + i + "\"" + " }}}}" ;
        }
        |
        <COLON>
        i = Primary()
        {
            value = "{\"bool\":{\"must\":{\"wildcard\":" + "{ \"" + value + "\": " + "\"" + i + "\"" + " }}}}" ;
        }
        |
        <EQUAL>
        i = Primary()
        {
            if(NumberUtils.isDigits(i) || DateTimeUtil.isTime(i)) {
                value = "{\"bool\":{\"filter\":{\"term\":" + "{ \"" + value + "\": " + "\"" + i + "\"" + " }}}}" ;
            } else {
                value = "{\"bool\":{\"must\":{\"term\":" + "{ \"" + value + "\": " + "\"" + i + "\"" + " }}}}" ;
            }
        }
        |
        <GREATER>
        i = Primary()
        {
            if(NumberUtils.isDigits(i) || DateTimeUtil.isTime(i)) {
                value = "{\"bool\":{\"filter\":{\"range\":" + "{\"" + value + "\":{\"from\":\"" + i + "\"," + "\"to\":null,\"include_lower\":false,\"include_upper\":true,\"boost\":1}}}}}" ;
            } else {
                value = "{\"bool\":{\"must\":{\"range\":" + "{\"" + value + "\":{\"from\":\"" + i + "\"," + "\"to\":null,\"include_lower\":false,\"include_upper\":true,\"boost\":1}}}}}" ;
            }
        }
        |
        <GREATER_EQUAL>
        i = Primary()
        {
            if(NumberUtils.isDigits(i) || DateTimeUtil.isTime(i)) {
                value = "{\"bool\":{\"filter\":{\"range\":" + "{\"" + value + "\":{\"from\":\"" + i + "\"," + "\"to\":null}}}}}" ;
            } else {
                value = "{\"bool\":{\"must\":{\"range\":" + "{\"" + value + "\":{\"from\":\"" + i + "\"," + "\"to\":null}}}}}" ;
            }
        }
        |
        <LESS>
        i = Primary()
        {
            if(NumberUtils.isDigits(i) || DateTimeUtil.isTime(i)) {
                value = "{\"bool\":{\"filter\":{\"range\":" + "{\"" + value + "\":{\"from\":null," + "\"to\":\"" + i + "\",\"include_lower\":true,\"include_upper\":false,\"boost\":1}}}}}" ;
            } else {
                value = "{\"bool\":{\"must\":{\"range\":" + "{\"" + value + "\":{\"from\":null," + "\"to\":\"" + i + "\",\"include_lower\":true,\"include_upper\":false,\"boost\":1}}}}}" ;
            }
        }
        |
        <LESS_EQUAL>
        i = Primary()
        {
            if(NumberUtils.isDigits(i) || DateTimeUtil.isTime(i)) {
                value = "{\"bool\":{\"filter\":{\"range\":" + "{\"" + value + "\":{\"from\":null," + "\"to\":\"" + i + "\"}}}}}" ;
            } else {
                value = "{\"bool\":{\"must\":{\"range\":" + "{\"" + value + "\":{\"from\":null," + "\"to\":\"" + i + "\"}}}}}" ;
            }
        }
    )*
    { return value ; }
}

String Primary() : {
    Token t ;
    String d ;
}
{
    t = <CHARACTER>
    { return t.image ; }
    |
    t = <STRING>
    { return t.image ; }
    |
    <OPEN_PAR> d = Result() <CLOSE_PAR>
    { return d ; }
}