/* Adder.java */
/* Generated By:JavaCC: Do not edit this line. Adder.java */
import java.io.PrintStream;
import com.huacloud.es.EsManager;
import com.huacloud.es.impl.EsManagerImpl;
public class Adder implements AdderConstants {
    public static void main(String[] args) throws Exception,TokenMgrError{
        while(true){
          try{
            Adder adder = new Adder(System.in);
            EsManager esManager=new EsManagerImpl();
            adder.start(esManager,System.out);
            }catch(Exception e){
              System.out.println("input error");
               e.printStackTrace();
              continue;
            }catch(TokenMgrError e){
              System.out.println("input error,please try again!");
               e.printStackTrace();
              continue;
            }
        }
    }
    String previousValue = null;

  final public void start(EsManager esManager,PrintStream printStream) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAR:
      case CHARACTER:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      previousValue = Result();
      jj_consume_token(END);
printStream.println(previousValue);printStream.println(esManager.query("{\u005c"query\u005c":"+previousValue+"}")) ;
    }
  }

  final public String Result() throws ParseException {String i ;
    String value ;
    value = ORW();
{if ("" != null) return "{\u005c"bool\u005c":" + value + "}" ;}
    throw new Error("Missing return statement in function");
  }

  final public String ORW() throws ParseException {String i ;
    String value ;
    value = Expression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      i = Expression();
value += "," + i ;
    }
{if ("" != null) return "{\u005c"should\u005c":[" + value + "]}";}
    throw new Error("Missing return statement in function");
  }

  final public String Expression() throws ParseException {String i ;
    String value ;
    value = Demo();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      i = Demo();
value = value + "," + i ;
    }
{if ("" != null) return "{\u005c"bool\u005c":{\u005c"must\u005c":[" + value + "]}}" ;}
    throw new Error("Missing return statement in function");
  }

  final public String Demo() throws ParseException {String i ;
    String value ;
    value = Primary();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:
      case NOT:
      case COLON:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
        i = Primary();
value = "{\u005c"bool\u005c":{\u005c"must_not\u005c":{\u005c"term\u005c":" + "{ \u005c"" + value + "\u005c": " + "\u005c"" + i + "\u005c"" + " }}}}" ;
        break;
        }
      case COLON:{
        jj_consume_token(COLON);
        i = Primary();
value = "{\u005c"bool\u005c":{\u005c"must\u005c":{\u005c"wildcard\u005c":" + "{ \u005c"" + value + "\u005c": " + "\u005c"" + i + "\u005c"" + " }}}}" ;
        break;
        }
      case EQUAL:{
        jj_consume_token(EQUAL);
        i = Primary();
value = "{\u005c"bool\u005c":{\u005c"must\u005c":{\u005c"term\u005c":" + "{ \u005c"" + value + "\u005c": " + "\u005c"" + i + "\u005c"" + " }}}}" ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return value ;}
    throw new Error("Missing return statement in function");
  }

  final public String Primary() throws ParseException {Token t ;
    String d ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHARACTER:{
      t = jj_consume_token(CHARACTER);
{if ("" != null) return t.image ;}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return t.image ;}
      break;
      }
    case OPEN_PAR:{
      jj_consume_token(OPEN_PAR);
      d = Result();
      jj_consume_token(CLOSE_PAR);
{if ("" != null) return d ;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public AdderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9400,0x80,0x40,0x2300,0x2300,0x9400,};
   }

  /** Constructor with InputStream. */
  public Adder(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Adder(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AdderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Adder(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AdderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Adder(AdderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AdderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
